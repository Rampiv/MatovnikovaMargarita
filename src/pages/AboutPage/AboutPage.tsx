import { useContext, useEffect, useRef } from "react"
import "./AboutPage.scss"
import { AppContext } from "../../context/contextProvider"
import { CommonLink } from "../../components"
import { gsap } from "gsap"
import { useGSAP } from "@gsap/react"
import { ContentAnimation } from "@kit/ContentAnimation"

gsap.registerPlugin(useGSAP)

export const AboutPage = () => {
  const { setRoute } = useContext(AppContext)

  const containerRef = useRef<HTMLDivElement>(null)
  const h1Ref = useRef<HTMLHeadingElement>(null)
  const listItemsRef = useRef<HTMLLIElement[]>([])
  const linkRef = useRef<HTMLDivElement>(null)
  const tl = useRef<gsap.core.Timeline>()

  useEffect(() => {
    setRoute("/about")
  })

  useGSAP(
    () => {
      tl.current = ContentAnimation({
        h1Ref,
        listItemsRef,
        linkRef,
      })
    },

    { scope: containerRef },
  )

  const descriptionLines = [
    "Friendly.",
    "–í —Ä–∞–±–æ—Ç–µ —Ü–µ–Ω—é –±–µ—Ä–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –æ–Ω –µ—Å—Ç—å.",
    "–ü—Ä–∏–∑–Ω–∞—é –∏ –ø–æ–º–æ–≥–∞—é –æ–±—Ä–µ—Å—Ç–∏ –ª—é–¥—è–º –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å.",
    "–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –º–µ–Ω—è ‚Äî —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–∞—è, –Ω–µ–ø–æ—Ö–æ–∂–∞—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è. üåº",
    "–ò—Å—Ç–æ—Ä–∏—è –∂–µ –º–æ–µ–π –∂–∏–∑–Ω–∏ —Å–≤—è–∑–∞–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π, –Ω–æ –∏ —Å—Ü–µ–Ω–æ–π.",
    "–ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–Ω–æ–≥–∏—Ö –ª–µ—Ç –≤–æ–∫–∞–ª –±—ã–ª –≤—Ç–æ—Ä–æ–π –≤–∞–∂–Ω–µ–π—à–µ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –º–æ–µ–π –∂–∏–∑–Ω–∏ –ø–æ—Å–ª–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚Äî –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –º–µ–Ω—è.",
    "–ü–æ—ç—Ç–æ–º—É –∫–∞–∫ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –æ–ø—ã—Ç–µ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ö–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.",
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –≤–µ—Ä—é –≤ —Å–∏–ª—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π.",
  ]

  const addToListRefs = (el: HTMLLIElement | null, index: number) => {
    if (el) listItemsRef.current[index] = el
  }

  return (
    <section className="about">
      <div className="container" ref={containerRef}>
        <h1 className="h1" ref={h1Ref}>
          –û–±–æ&nbsp;–º–Ω–µ
        </h1>
        <ul className="about__list">
          {descriptionLines.map((item, index) => {
            return (
              <li
                className="about__item"
                key={`${item}${index}`}
                ref={el => addToListRefs(el, index)}
              >
                {item}
              </li>
            )
          })}
        </ul>
        <CommonLink
          data={{
            link: "/education",
            text: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
          }}
          linkRef={linkRef}
        />
      </div>
    </section>
  )
}
